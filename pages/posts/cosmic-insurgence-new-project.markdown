# Cosumic Insurgence (New Project)
This post is going to be all about the new project that has taken the place of the old roguelike as my main focus. This project is heavily inspired by the game King of Dragon Pass, so if you're familiar with that you'll understand the basic direction that we're taking the project in.

Now to delve in to the current state of the engine. So far it's not much to look at, but the basic structure for the event system is set up. In order to facilitate the construction of events (because ideally there should be a ton of them), I wrote a simple markup language I call EVML, short for EVent Markup Language.

It's pretty simplistic at the time of this post, but I have a parser built in to the engine that scans the event folder and builds events out of all of these documents. The main functionality of the options is not implemented yet. Once that is done, every option will include a "trigger" that will instruct the parser what the result of the event should be. Whether it's unlocking a new event, adding a person to your cabinet, or modifying your resources in some way, the idea is to keep the trigger syntax robust enough that it can handle all sorts of options easily. This robustness is why it's taking much more time to develop than the rest of the current feature set of the parser.

To get an idea of the syntax in action, here's a quick example event:

<name>Sample Event</name>  
<img>Data/images/sampleImage.bmp</img>  
<desc>This is a sample event. Here are some options to choose from:</desc>  
<opt>option 1</opt>  
<opt>option 2</opt>  
<unique>false</unique>  
<lock>false</lock>  
<rand>50</rand>

Which produces this when parsed by the engine:

![sample event](/pages/assets/newProject/sampleEvent.jpg)

There is also currently simple error and warning processing available in the console view. It outputs a text representation of all the fields of the event, so you can get an idea of what's happening on the fly, as well as any messages generated by any problems it might have. Currently error checking is limited to syntax errors on the parser level, which will cause the event not to display at all. A warning is anything that causes an issue with the event, but isn't fatal enough to cause the event to fail to display. Here are some examples that should explain it better, using an edited version of the same sample event.

Syntax Error:

<namesadfasdfasdf>Sample Event</name>  
<img>Data/images/sampleImage.bmp</img>  
<desc>This is a sample event. Here are some options to choose from:</desc>  
<opt>option 1</opt>  
<opt>option 2</opt>  
<unique>false</unique>  
<lock>false</lock>  
<rand>50</rand>

This event will produce a few token errors, shown here:

![errors](/pages/assets/newProject/error1.jpg)

As you can see, the name field, which normally shows up right after "Event:" is missing (you can see in the next event where the name should appear). The 1 after "Contains Errors:" in this case is a boolean flag indicating that there are any amount of errors, not a count.

The warnings are where it gets a bit more interesting, as we get past checking for just syntax. Next I'll show what happens when the image used for the event is not found.

Image Warning:

<name>Sample Event</name>  
<img>Data/images/sampleImageasdf.bmp</img>  
<desc>This is a sample event. Here are some options to choose from:</desc>  
<opt>option 1</opt>  
<opt>option 2</opt>  
<unique>false</unique>  
<lock>false</lock>  
<rand>50</rand>

This event produces the following warning:

![warning](/pages/assets/newProject/imageWarning.jpg)

As you can see, it automatically replaces the image with the placeholder image that will always be there, meaning the event can still be displayed in some form. Here's what it looks like when it shows up in game:

![in game warning](/pages/assets/newProject/imageWarningInGame.jpg)

There are also warnings for exceeding the maximum amount of options, as the rest will be cutoff. This is because at the moment selecting options is done by the keyboard, so there can only be 9 options (0 is not included).

Options Warning:

<name>Sample Event</name>  
<img>Data/images/sampleImage.bmp</img>  
<desc>This is a sample event. Here are some options to choose from:</desc>  
<opt>option 1</opt>  
<opt>option 2</opt>  
<opt>option 3</opt>  
<opt>option 4</opt>  
<opt>option 5</opt>  
<opt>option 6</opt>  
<opt>option 7</opt>  
<opt>option 8</opt>  
<opt>option 9</opt>  
<opt>option too many</opt>  
<unique>false</unique>  
<lock>false</lock>  
<rand>50</rand>

This even produces the following warning:

![option warning](/pages/assets/newProject/optionWarning.jpg)

When shown in game, only the first 9 options are displayed:

![first 9 options](/pages/assets/newProject/optionWarningInGame.jpg)

That's about it so far. The game is still very early on, so there's not much that's playable. You can generate the events randomly, which takes the weight given into account, and the less visible features such as uniqueness and locking are implemented on the back end. Interesting stuff programatically, but not very fun to show off. I'll be posting the source code later once I've cleaned it up a bit and made it more presentable.